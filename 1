diff --git a/package-lock.json b/package-lock.json
index 3374968..e83e69f 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -15,11 +15,25 @@
         "ejs": "^3.1.6",
         "express": "^4.17.2",
         "express-session": "^1.17.2",
+        "joi": "^17.5.0",
         "mongoose": "^6.1.6",
         "morgan": "^1.10.0",
         "nodemon": "^2.0.15"
       }
     },
+    "node_modules/@hapi/hoek": {
+      "version": "9.2.1",
+      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.2.1.tgz",
+      "integrity": "sha512-gfta+H8aziZsm8pZa0vj04KO6biEiisppNgA1kbJvFrrWu9Vm7eaUEy76DIxsuTaWvti5fkJVhllWc6ZTE+Mdw=="
+    },
+    "node_modules/@hapi/topo": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
+      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
+      "dependencies": {
+        "@hapi/hoek": "^9.0.0"
+      }
+    },
     "node_modules/@mapbox/node-pre-gyp": {
       "version": "1.0.8",
       "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.8.tgz",
@@ -67,6 +81,24 @@
         "node": ">=10"
       }
     },
+    "node_modules/@sideway/address": {
+      "version": "4.1.3",
+      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.3.tgz",
+      "integrity": "sha512-8ncEUtmnTsMmL7z1YPB47kPUq7LpKWJNFPsRzHiIajGC5uXlWGn+AmkYPcHNl8S4tcEGx+cnORnNYaw2wvL+LQ==",
+      "dependencies": {
+        "@hapi/hoek": "^9.0.0"
+      }
+    },
+    "node_modules/@sideway/formula": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.0.tgz",
+      "integrity": "sha512-vHe7wZ4NOXVfkoRb8T5otiENVlT7a3IAiw7H5M2+GO+9CDgcVUUsX1zalAztCmwyOr2RUTGJdgB+ZvSVqmdHmg=="
+    },
+    "node_modules/@sideway/pinpoint": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
+      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
+    },
     "node_modules/@sindresorhus/is": {
       "version": "0.14.0",
       "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
@@ -1356,6 +1388,18 @@
       "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
       "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU="
     },
+    "node_modules/joi": {
+      "version": "17.5.0",
+      "resolved": "https://registry.npmjs.org/joi/-/joi-17.5.0.tgz",
+      "integrity": "sha512-R7hR50COp7StzLnDi4ywOXHrBrgNXuUUfJWIR5lPY5Bm/pOD3jZaTwpluUXVLRWcoWZxkrHBBJ5hLxgnlehbdw==",
+      "dependencies": {
+        "@hapi/hoek": "^9.0.0",
+        "@hapi/topo": "^5.0.0",
+        "@sideway/address": "^4.1.3",
+        "@sideway/formula": "^3.0.0",
+        "@sideway/pinpoint": "^2.0.0"
+      }
+    },
     "node_modules/json-buffer": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
@@ -2561,6 +2605,19 @@
     }
   },
   "dependencies": {
+    "@hapi/hoek": {
+      "version": "9.2.1",
+      "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.2.1.tgz",
+      "integrity": "sha512-gfta+H8aziZsm8pZa0vj04KO6biEiisppNgA1kbJvFrrWu9Vm7eaUEy76DIxsuTaWvti5fkJVhllWc6ZTE+Mdw=="
+    },
+    "@hapi/topo": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/@hapi/topo/-/topo-5.1.0.tgz",
+      "integrity": "sha512-foQZKJig7Ob0BMAYBfcJk8d77QtOe7Wo4ox7ff1lQYoNNAb6jwcY1ncdoy2e9wQZzvNy7ODZCYJkK8kzmcAnAg==",
+      "requires": {
+        "@hapi/hoek": "^9.0.0"
+      }
+    },
     "@mapbox/node-pre-gyp": {
       "version": "1.0.8",
       "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.8.tgz",
@@ -2595,6 +2652,24 @@
         }
       }
     },
+    "@sideway/address": {
+      "version": "4.1.3",
+      "resolved": "https://registry.npmjs.org/@sideway/address/-/address-4.1.3.tgz",
+      "integrity": "sha512-8ncEUtmnTsMmL7z1YPB47kPUq7LpKWJNFPsRzHiIajGC5uXlWGn+AmkYPcHNl8S4tcEGx+cnORnNYaw2wvL+LQ==",
+      "requires": {
+        "@hapi/hoek": "^9.0.0"
+      }
+    },
+    "@sideway/formula": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/@sideway/formula/-/formula-3.0.0.tgz",
+      "integrity": "sha512-vHe7wZ4NOXVfkoRb8T5otiENVlT7a3IAiw7H5M2+GO+9CDgcVUUsX1zalAztCmwyOr2RUTGJdgB+ZvSVqmdHmg=="
+    },
+    "@sideway/pinpoint": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/@sideway/pinpoint/-/pinpoint-2.0.0.tgz",
+      "integrity": "sha512-RNiOoTPkptFtSVzQevY/yWtZwf/RxyVnPy/OcA9HBM3MlGDnBEYL5B41H0MTn0Uec8Hi+2qUtTfG2WWZBmMejQ=="
+    },
     "@sindresorhus/is": {
       "version": "0.14.0",
       "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
@@ -3545,6 +3620,18 @@
         }
       }
     },
+    "joi": {
+      "version": "17.5.0",
+      "resolved": "https://registry.npmjs.org/joi/-/joi-17.5.0.tgz",
+      "integrity": "sha512-R7hR50COp7StzLnDi4ywOXHrBrgNXuUUfJWIR5lPY5Bm/pOD3jZaTwpluUXVLRWcoWZxkrHBBJ5hLxgnlehbdw==",
+      "requires": {
+        "@hapi/hoek": "^9.0.0",
+        "@hapi/topo": "^5.0.0",
+        "@sideway/address": "^4.1.3",
+        "@sideway/formula": "^3.0.0",
+        "@sideway/pinpoint": "^2.0.0"
+      }
+    },
     "json-buffer": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
diff --git a/package.json b/package.json
index 47019c7..88e6d99 100644
--- a/package.json
+++ b/package.json
@@ -24,6 +24,7 @@
     "ejs": "^3.1.6",
     "express": "^4.17.2",
     "express-session": "^1.17.2",
+    "joi": "^17.5.0",
     "mongoose": "^6.1.6",
     "morgan": "^1.10.0",
     "nodemon": "^2.0.15"
diff --git a/src/models/user.js b/src/models/user.js
index 8d9869c..8ca2a81 100644
--- a/src/models/user.js
+++ b/src/models/user.js
@@ -4,13 +4,23 @@ const { Schema } = mongoose;
 
 const options = { timestapms: true };
 
+const CartGameSchema = new Schema({
+  title: String,
+  price: Number,
+  year: Number,
+  category: String,
+  tags: [String],
+  miniatureUrl: String,
+  description: String,
+});
+
 const UserSchema = new Schema({
   email: String,
   password: String,
   name: String,
   surname: String,
   admin: { type: Boolean, default: false },
-  cart: [GameSchema],
+  cart: [CartGameSchema],
 }, options);
 
 const User = mongoose.model("User", UserSchema);
diff --git a/src/routes/games.js b/src/routes/games.js
index c84ca5e..b97d619 100644
--- a/src/routes/games.js
+++ b/src/routes/games.js
@@ -1,4 +1,6 @@
 const { Router } = require('express');
+const adminVerification = require('../middleware/adminVerification');
+const gameValidation = require('../middleware/gameValidation');
 const { Game } = require('../models/game');
 
 const titleUsedError = (title) => new Error(`Title already used ${title}`);
@@ -6,49 +8,47 @@ const invalidGameError = () => new Error('Game not recognized');
 
 const router = Router();
 
-router.get('/guest', async (req, res, next) => {
+router.get('/', (req, res, next) => {
   Game.find({})
-    .then((games) => res.render('guest/games', {games}))
-    .catch((error) => next(error));
-});
-
-router.get('/user', async (req, res, next) => {
-  Game.find({})
-    .then((games) => res.render('user/games', {games}))
-    .catch((error) => next(error));
-});
+    .then((games) => {
+      const { user } = req.session;
 
-router.get('/admin', async (req, res, next) => {
-  Game.find({})
-    .then((games) => res.render('admin/games', {games}))
+      if (!user) return res.render('guest/games', { games });
+      if (!user.admin) return res.render('user/games', { games, cartSize: user.cartSize });
+      return res.render('admin/games', { games });
+    })
     .catch((error) => next(error));
 });
 
-router.post('/', /*gameValidation,*/ async (req, res, next) => {
-  // const { user } = req.session;
-  // if (!user || !user.admin) {
-
-  // }
-
+router.post('/', adminVerification, gameValidation, async (req, res, next) => {
   const { title } = req.body;
   const { titleUsed, error } = await Game.findOne({ title })
     .then((game) => ({ titleUsed: game !== null }))
     .catch((error) => ({ error }));
   if (error) return next(error);
-  if (titleUsed) return next(titlelUsedError(title));
+  if (titleUsed) return next(titleUsedError(title));
 
   const game = req.body;
   Game.create(game)
-    .then(() => res.redirect('/games/admin'))
+    .then(() => res.redirect('/games'))
     .catch((error) => next(error));
 });
 
-router.post('/delete/:_id', async (req, res, next) => {
+router.post('/delete/:_id', adminVerification, (req, res, next) => {
   const { _id } = req.params;
 
   Game.deleteOne({ _id })
-    .then(({ deletedCount }) => res.redirect('/games/admin'))
+    .then(({ deletedCount }) => res.redirect('/games'))
+    .catch((error) => next(error));
+});
+
+router.post('/update/:_id', adminVerification, gameValidation, (req, res, next) => {
+  const { _id } = req.params;
+  const game = req.body;
+
+  Game.updateOne({ _id }, game)
+    .then(() => res.redirect('/games'))
     .catch((error) => next(error));
-})
+});
 
 module.exports = router;
diff --git a/src/routes/users.js b/src/routes/users.js
index 35866dd..8bf0d57 100644
--- a/src/routes/users.js
+++ b/src/routes/users.js
@@ -3,7 +3,8 @@ const bcrypt = require('bcrypt');
 
 const User = require('../models/user');
 const { Game } = require('../models/game');
-// const userValidation = require('../middleware/validation/user');
+const userValidation = require('../middleware/userValidation');
+const adminVerification = require('../middleware/adminVerification');
 
 const emailUsedError = (email) => new Error(`Email already used ${email}`);
 const loginError = () => new Error('Invalid username or password');
@@ -12,7 +13,7 @@ const invalidGameError = () => new Error('Game not recognized');
 
 const router = Router();
 
-router.post('/register', /*userValidation,*/ async (req, res, next) => {
+router.post('/register', userValidation, async (req, res, next) => {
   const { email, password } = req.body;
 
   const { emailUsed, error } = await User.findOne({ email })
@@ -33,16 +34,11 @@ router.post('/register', /*userValidation,*/ async (req, res, next) => {
   User.create(user)
     .then(({ _id, admin, cart }) => {
       req.session.user = { _id, admin, cartSize: cart.length }
-      res.redirect(admin ? '/games/admin' : '/games/user');
+      res.redirect('/games');
     })
     .catch((error) => next(error));
 });
 
-router.get('/', (req, res) => {
-  const user = req.session.user;
-  res.json(user);
-})
-
 router.post('/login', /*userValidation,*/ async (req, res, next) => {
   const { email, password } = req.body;
 
@@ -57,7 +53,7 @@ router.post('/login', /*userValidation,*/ async (req, res, next) => {
 
   const { _id, admin, cart } = user;
   req.session.user = { _id, admin, cartSize: cart.length };
-  res.redirect(admin ? '/games/admin' : '/games/user');
+  res.redirect('/games');
 });
 
 router.post('/logout', async (req, res, next) => {
@@ -65,35 +61,57 @@ router.post('/logout', async (req, res, next) => {
   res.redirect('/');
 });
 
-router.put('/cart/add', async (req, res, next) => {
+router.get('/cart', (req, res, next) => {
+  const { user } = req.session;
+  if (!user || user.admin) return res.redirect('/games');
+
+  User.findById(user._id)
+    .then((user) => res.render('user/cart', { user }))
+    .catch((error) => next(error));
+});
+
+router.post('/cart/add/:gameId', async (req, res, next) => {
   const userId = req.session.user._id;
   const user = await User.findById(userId);
   if (!user) return next(invalidUserError());
 
-  const { gameId } = req.body;
+  const { gameId } = req.params;
   const game = await Game.findById(gameId);
   if (!game) return next(invalidGameError());
+  const { _id, ...cartGame } = game._doc;
 
-  user.cart.push(game);
-  user.save()
-    .then(() => {
-      req.session.user.cartSize += 1;
-      res.redirect('/user/games');
+  User.findByIdAndUpdate(userId, { $push: { cart: cartGame }}, { new: true })
+    .then((user) => {
+      req.session.user.cartSize = user.cart.length;
+      res.redirect('/games');
     })
     .catch((error) => next(error));
 });
 
-router.get('/admin', async (req, res, next) => {
-  const users = await User.find({});
-  // Add validation and error handling
-  res.render('admin/users', {users});
+router.post('/cart/remove/:gameId', async (req, res, next) => {
+  const userId = req.session.user._id;
+  const user = await User.findById(userId);
+  if (!user) return next(invalidUserError());
+
+  User.findByIdAndUpdate( userId, { $pull: { cart: { _id: req.params.gameId }}}, { new: true })
+    .then((user) => {
+      req.session.user.cartSize = user.cart.length;
+      res.redirect('/users/cart');
+    })
+    .catch((error) => next(error));
+});
+
+router.get('/', adminVerification, async (req, res, next) => {
+  User.find({})
+    .then((users) => res.render('admin/users', {users}))
+    .catch((error) => next(error));
 })
 
-router.post('/admin/delete/:_id', async (req, res, next) => {
+router.post('/delete/:_id', adminVerification, async (req, res, next) => {
   const { _id } = req.params;
 
   User.deleteOne({ _id })
-    .then(({ deletedCount }) => res.redirect('/users/admin'))
+    .then(({ deletedCount }) => res.redirect('/users'))
     .catch((error) => next(error));
 });
 
